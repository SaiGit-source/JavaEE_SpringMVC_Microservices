Level1 Cache in Hibernate

Student student1 = session.get(Student.class, 1);

Student student2 = session.get(Student.class, 1);

two times with same ID

Hibernate writes the query only once but returns the same object twice

what's happening behind the scene?

get() method so no proxy object -> Hibernate will trigger the query -> will create JDBC environment -> based on that, it will fetch the data -> Then Hibernate will create one actual object -> then it will perform injection using setters() -> data will be added into object -> this object will be created inside Level 1 caching (L1 cache) -> this object is stored inside the cache within the session -> next time for the same request, it will go into L1 cache and retrieve the object. for a new query or new ID, it will bring a new object into L1 Cache

Student student3 = session.get(Student.class, 2); // for this a new query will be generated by Hibernate

say we have two session objects: session1 = sessionFactory.openSession();
session2 = sessionFactory.openSession();

session1.get(Student.class, 1); // the object is stored in L1 cache of session1
session2.get(Student.class, 1); // each session will have its own L1 cache
so two queries will be generated, one for L1 cache of session1 object and one for L1 cache of session2 object. so number of database hits are less and performance of application is better


