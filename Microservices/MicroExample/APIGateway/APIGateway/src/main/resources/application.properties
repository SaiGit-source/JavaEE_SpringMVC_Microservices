spring.application.name=APIGateway

server.port=8448

spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service-id=true


#eureka.client.service-url.defaultZone=http://localhost:8761
#eureka.client.register-with-eureka=true
#eureka.client.fetch-registry=true
#eureka.instance.hostname=APIGateway

# Routing to microservices could be done from application.properties as well in addition to Java

## Works fine!
#spring.cloud.gateway.routes.id=FeignClientMicro
#spring.cloud.gateway.routes.uri=http://localhost:8086
#spring.cloud.gateway.routes.predicates[0]=Path=/FeignClientMicro/**


## Multiple microservices
#spring.cloud.gateway.routes[0].id=FeignClientMicro
#spring.cloud.gateway.routes[0].uri=http://localhost:8086
#spring.cloud.gateway.routes[0].predicates[0]=Path=/FeignClientMicro/**


#spring.cloud.gateway.routes[1].id=MainMicroservice
#spring.cloud.gateway.routes[1].uri=http://localhost:8582
#spring.cloud.gateway.routes[1].predicates[0]=Path=/MainMicroservice/**


########## Circuit breaker pattern #############

# 3 states to manage microservice: Closed, Open, HalfOpen -> Only on Open state Circuit breaker is triggered and forwards to fallbackRoute
# COUNT_BASED means, when 50%(failureRateThreshold) of requests fail out of 10(slidingWindowSize), it will go to Open state and will stay in Open for 5sec(waitDurationInOpenState)
# then slowly will go into HalfOpen state (automaticTransitionFromOpenToHalfOpenEnabled), if requests fail again will go into Open otherwise Closed state after successful requests

management.health.circuitbreakers.enabled=true

management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
# we can monitor application health using Actuators

resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED

resilience4j.circuitbreaker.configs.default.slidingWindowSize=10

resilience4j.circuitbreaker.configs.default.failureRateThreshold=50

resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s

resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3

resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true

resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

# retry pattern
resilience4j.retry.configs.default.max-attempts=3
resilience4j.retry.configs.default.wait-duration=2s
