Aspect Oriented Programming AOP:

Every application has business logic, main logic, purpose of App -> Actual function. for example, University website's main purpose is to provide Program info etc. 

Every application will have cross-cutting logic or secondary logic to support business logic, for example: Logging, Security, Exception handling

AOP is there to separate business logic and cross-cutting logic


Business logic 			AOP integrates Business logic with Secondary logic
	|
	AOP
	|
Secondary logic


Other concepts:

Aspect, Advice, Target, Joinpoint, Pointcut, Weaving, Proxy class


1. Aspect means Cross-cutting logic: such a logic, which contains the secondary logic like Security, Logging, Exception Handling. Aspect is talking about secondary logic

2. Advice: At what moment or when Aspect logic should execute: Advice decides when Aspect logic should get executed. RestControllerAdvice for example. BeforeAdvice -> Aspect logic is executed before executing the business logic, AfterAdvice > Aspect logic is executed after executing the business logic, AroundAdvice -> executes before , ThrowsAdvice -> executes AL while BL

3. Target: Target is a class that contains the actual business logic (main functionality). what you had in mind before developing application. 

4. JoinPoint: what's that exact point where secondary logic should integrate with BL. exact point where AL and BL should be integrated. for example, if there is an exception, thats where Advice will execute the Aspect Logic. so thats where BL and AL meet

5. Pointcut: which primary logic / business logic methods, to which secondary logic/AL should be applied to. AL by default will be applied to all methods in Target(BL). @pointcut we can specify where to apply bl1() not everywhere

6. Weaving: it is a process of combining target and aspect. Weaving will generate a Proxy class when combining target and aspect. this Proxy class will be executed at runtime by SpringAOP. Process of integration is called as Weaving



 
