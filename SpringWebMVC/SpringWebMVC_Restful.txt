Spring Web MVC:

earlier there was a technology called as Servlets

behind the scene, SpringMVC uses only Servlets

under MVC, we have Spring Rest

two types: end user to business (C to B) and business to business (B to B). Facebook for example, C to B.

when we require a lot of developers, but we dont have resources to hire developers, in that case, we use third-party like Paypal, Razor etc we have outsourced Payment services

Paypal is an example of B to B. 

Spring Web MVC -> 2 design patterns : MVC architectural design pattern and Front controller design pattern.

SpringMVC components: Front controller (behind uses Dispatcher servlet), Handler mapper, Controller (class annotated with Controller annotation), View resolver, View components

End user -> will make a request to an application on server -> when we make request, we use HTTP protocol, then we give response back

the Front controller along with Dispatcher Servlet ->  takes care of the HTTP process.

three layers: Web layer (Controller classes), Business layer, Dao layer (JDBC)

Request will go to Frontcontroller (Dispatcher Servlet), Dispatcher servlet will ask its assisstant Handler mapper. Handler mapper will identify the correct Controller for the particular request from client. Handler mapper will give only info to Frontcontroller. based on the info, FC will handover request to Business layer. Controller (Web layer) will respond back to the FC with model and view object. Frontcontroller knows which file to render like index.html but it doesn't know which technology like HTML, JSP. so Frontcontroller talks to ViewResolver to get this technology information. FC will give data to ViewComponent which will render file. ViewResolver only identifies the frontend file and its location. In short, FC both takes requests from clients and responds back. it both pre-processes and post-processes the requests

FrontController (Dispatcher Servlet) will receive incoming HTTP requests. -> Preprocessing and Postprocessing of requests
Dispatcher Servlet is a predefined class in Spring MVC module acts as FrontController
Dispatcher Servlet will forward the requested URL to HandlerMapper
HandlerMapper will identify which Controller will handle the client requests -> this details will be given back to Dispatcher Servlet
Dispatcher Servlet will now call the respective Controller in web layer
Controller will process the request and return the model and a few objects as response to Dispatcher Servlet (Front Controller).
Model is the actual data, View is the logical Viewname (View filename thats all no extension or technology information)
Dispatcher Servlet will call View resolver to identify the extension (JSP, HTML etc) and view file location. These details will be given back to Dispatcher Servlet
Dispatcher Servlet will send model data to View component -> Model data will be rendered in the View file and send back the View to Dispatcher servlet
Dispatcher Servlet will respond back to Client in client-understandable format (View page)

in Spring Web MVC module, the Front controller is DispatcherServlet, which is a ready-made Servlet component. All the activities in Spring MVC module takes place under the control or monotoring of Dispatcher Servlet, which is the Front controller 

if you want to develop Web app with Spring Web MVC module -> is it compulsory to use SpringBoot? No, we could go with XML driven config, Annotation approach, XML+Annotation approach. Easiest one is SpringBoot MVC (Annotations). We are only going to look into SpringBoot MVC

JAR and WAR?
Java Archives and Web Archives. JAR is a collection of .class files (compiled Java files). On the web applications, only WAR files will be deployed on the server. inside that all other code files are present. in Servlet, we downloaded the Tomcat server and we deployed manually. in SpringBoot, it has embedded Apache Tomcat Server and that's the advantage of SpringBoot. Automatically Tomcat server will be added into your application. if you want to deploy your application on a different server (other than Apache Tomcat) then got to manually create WAR files. Select WAR in SpringBoot project (Spring website). When you create a WAR project, we see two files: WebApplication file (to deploy on Tomcat), ServletInitializer.java for other servers. default Tomcat server port# 8080 where application is deployed. however, port number can be changed. server.port=8484

To render JSP files, we need to add a dependency in properties: Jasper -> tomcat-embed-jasper

Default protocol of @RequestMapping was 'GET', method=RequestMethod.GET -> to bind different types of HTTP requests in our application -> for Spring 1 to 4

From Spring 4 onwards, the story changes, to bind our method to GET request we have introduced one request called as @GetMapping -> to Bind our method to HTTP POST request, we have @PostMapping. similarly we have @PatchMapping, @DeleteMapping

it is not recommended to have same controller endpoints however it is allowed it binded to different HTTP methods like GET and POST

Invasive application and Non-invasive application: Invasive means tightly coupled with third-party (entire application is controlled by Spring framework). if we use Map instead of Model, then it becomes non-invasive Controller. Map also works in controller

Dep: Spring Web, Spring Boot DevTools

pre-defined classes like LocalTime() and we want to hand-over to Spring then we must use @Bean 

***********************************************************************

QueryParameter Vs PathParameter -> technology for web development is Servlet -> Frontcontroller uses Servlet technology. Spring internally uses Servlet only

With Project Lombok, we dont have to use setters() and getters()

client is making a request -> server (how to respond) -> possible controller methods

if client is sending data, how to receive data at Server? three ways: Query parameter, Path parameter, Form data

Query parameter -> send parameter in URL not recommended. Data from Client to Server is in URL not in request body
Type this in the URL: http://localhost:8484/EducationApp/getInfo?name=Abc&course=Springboot  // we need this '?' symbol followed by key-val pair that's how we send data to Server through URL

Path parameter -> type this: http://localhost:8484/EducationApp/getInfo/Abc/Devops -> @GetMapping("/getInfo/{name}/{course}") to receive at Server @PathVariable("name")String n













